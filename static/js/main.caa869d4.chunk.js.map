{"version":3,"sources":["games/gameLogics/Utilities.js","games/gameLogics/connectNLogic.js","logo.svg","games/home/personalNavbar.jsx","games/home/gameColumn.jsx","games/home/ClassicGames.js","games/commonComponents/box.jsx","games/commonComponents/board.jsx","games/connectFour/gameConnectFour.jsx","games/connectFour/ConnectFour.jsx","games/tictactoe/gameTicTacToe.jsx","games/tictactoe/TicTacToe.jsx","games/gameLogics/SnakeLogic.js","games/snake/snake.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","matrixToArrayConverter","id","numberBoxes","row","Math","floor","column","createEmptyMatrix","number","matrix","i","j","push","differentRows","vector","numberOfBoxes","previous","every","value","currentRow","ret","differentColumn","calculateWinner","boxes","numberBoxesToVerify","structure","unit","Array","from","v","index","length","_loop","_ret","__webpack_require__","p","PersonalNavbar","react_default","a","createElement","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","className","activeKey","Item","Link","eventKey","Component","GameColumn","OverlayTrigger","overlay","Tooltip","this","props","description","link","width","height","xmlns","preserveAspectRatio","focusable","role","aria-label","fill","linkImage","name","ClassicGames","gameColumn","Box","key","onClick","style","Board","_this","box","Object","defineProperty","getValue","_this2","board","map","renderBox","renderBoard","boardSize","gameLogic","require","GameConnectFour","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","colors","stepNumber","isXNext","counter","before","slice","current","freePosition","_findFreePosition","setState","concat","newStep","winner","background","includes","border","type","status","commonComponents_board","handleClick","handleStyle","reset","handleHistory","ConnectFour","gameConnectFour","GameTicTacToe","xIsNext","possible","borderRight","borderTop","borderLeft","borderBottom","color","autoComplete","onChange","e","handleChange","target","TicTacToe","gameTicTacToe","SnakeLogic","boardDimensions","random","event","direction","newDirection","keyCode","y","x","Snake","componentDidMount","document","addEventListener","handleDirection","setTimeout","gameLoop","snakeTail","snakeLogic","scoreForEachApple","Utilities","snakePosition","snakeDirection","applePosition","newApplePosition","score","amIDied","isGamePaused","controller","position","newRow","newColumn","didIHitABorder","hold","forEach","currentTailPiece","coordinates","_this3","tailPiece","tail","inFrontOf","_this4","_this5","_this6","getName","getBoxValue","pause","App","HashRouter","personalNavbar","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.caa869d4.chunk.js","sourcesContent":["function matrixToArrayConverter(id, numberBoxes){\r\n    const row = Math.floor(id / numberBoxes);\r\n    const column = id - row * numberBoxes;\r\n    return {row: row, column: column};\r\n}\r\n\r\nfunction createEmptyMatrix(number){\r\n    const matrix = [];\r\n    for(let i = 0; i < number; i++){\r\n        const row = [];\r\n        for(let j = 0; j < number; j++){\r\n            //row.push(j + (i * number));\r\n            row.push(null);\r\n        }\r\n        matrix.push(row);\r\n    }\r\n    return matrix;\r\n}\r\n\r\nmodule.exports.matrixToArrayConverter = matrixToArrayConverter;\r\nmodule.exports.createEmptyMatrix = createEmptyMatrix;","function differentRows(vector, numberOfBoxes){\r\n    let previous = null;\r\n    return vector.every((value) =>\r\n            {\r\n                const currentRow = Math.floor(value/numberOfBoxes);\r\n                let ret = false;\r\n                if(previous === null){\r\n                    previous = currentRow;\r\n                    return true;\r\n                }\r\n                if(previous - 1 === currentRow){\r\n                    ret = true;\r\n                    previous = currentRow;\r\n                }\r\n                return ret;\r\n            });\r\n}\r\n\r\nfunction  differentColumn(vector, numberBoxes) {\r\n    let column = Math.floor(vector[0]/numberBoxes);\r\n    return vector.every(value => column === Math.floor(value / numberBoxes));\r\n}\r\nlet calculateWinner = function(boxes, numberBoxes,  numberBoxesToVerify){\r\n    let structure = (value, unit) => Array.from(new Array(numberBoxesToVerify), (v, index) => value - unit * index);\r\n    for(let i = boxes.length - 1; i >= numberBoxes - 1; i = i - numberBoxes ){\r\n        for(let j = i; j > i - numberBoxes; j--){\r\n            if(boxes[j]) {\r\n                if (structure(j, numberBoxes).every((index) => boxes[j] === boxes[index])) {\r\n                    return [boxes[j], structure(j, numberBoxes)];\r\n                }\r\n                if( differentColumn(structure(j, 1), numberBoxes) && structure(j, 1).every(index => boxes[j] === boxes[index])){\r\n                    return [boxes[j], structure(j, 1)];\r\n                }\r\n                if( differentRows(structure(j, numberBoxes + 1), numberBoxes) && structure(j, numberBoxes + 1).every(index => boxes[j] === boxes[index])){\r\n                    return [boxes[j], structure(j, numberBoxes + 1)];\r\n                }\r\n                if( differentRows(structure(j, numberBoxes - 1), numberBoxes) && structure(j, numberBoxes - 1).every(index => boxes[j] === boxes[index])){\r\n                    return [boxes[j], structure(j, numberBoxes - 1)];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\nmodule.exports.calculateWinner = calculateWinner;","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport { Nav, Navbar } from 'react-bootstrap';\r\n\r\nclass PersonalNavbar extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"primary\" variant=\"dark\">\r\n                <Navbar.Brand href=\"/ClassicGames/#/\">Classic Games</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\"/>\r\n                    <Nav className=\"justify-content-end\" activeKey=\"/Home\" >\r\n                            <Nav.Item>\r\n                                <Nav.Link eventKey=\"link-1\" href=\"/ClassicGames/#/ConnectFour\"><h5>Connect Four</h5></Nav.Link>\r\n                            </Nav.Item>\r\n                            <Nav.Item>\r\n                                <Nav.Link eventKey=\"link-2\" href=\"/ClassicGames/#/Snake\"><h5>Snake</h5></Nav.Link>\r\n                            </Nav.Item>\r\n                            <Nav.Item>\r\n                                <Nav.Link eventKey=\"link-2\" href=\"/ClassicGames/#/TicTacToe\"><h5>Tic-Tac-Toe</h5></Nav.Link>\r\n                            </Nav.Item>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PersonalNavbar;\r\n","import React, { Component } from 'react';\r\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\r\n\r\nclass GameColumn extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"col-md-4\">\r\n                <div className=\"card mb-4 shadow-sm\">\r\n                    <OverlayTrigger\r\n                        overlay={\r\n                            <Tooltip id={`tooltip-bottom`}>\r\n                                <p className=\"card-text\">{ this.props.description }</p>\r\n                            </Tooltip>\r\n                        }>\r\n                        <a href= { this.props.link }>\r\n                            <svg className=\"bd-placeholder-img card-img-top\" width=\"100%\" height=\"225\"\r\n                                 xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMidYMid slice\"\r\n                                 focusable=\"false\" role=\"img\" aria-label=\"Placeholder: Thumbnail\">\r\n                                <rect width=\"100%\" height=\"100%\" fill=\"aliceblue\"/>\r\n                                <image href= { this.props.linkImage } height=\"100%\" width=\"100%\"/>\r\n                            </svg>\r\n                        </a>\r\n                    </OverlayTrigger>\r\n                    <h3>{ this.props.name }</h3>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameColumn;","import React, { Component } from 'react'\r\nimport GameColumn from './gameColumn'\r\nimport './ClassicGames.css'\r\n\r\nclass ClassicGames extends Component {\r\n    render() {\r\n        return (\r\n            <main role=\"main\">\r\n                <div className=\"album py-5 games-home-body\">\r\n                    <div className=\"container home-container\">\r\n                        <div className=\"row first-home-row\">\r\n                            <GameColumn name = \"Connect Four\" link = \"/ClassicGames/#/ConnectFour\" linkImage = \"http://simonececcarelli.altervista.org/ClassicGamesImages/connectFour.PNG\" description = \"This is an implementation of the game Connect Four. The objective of the game is to be the first to form a horizontal, vertical, or diagonal line of four of one's own discs\"/>\r\n                            <GameColumn name = \"Snake\" link = \"/ClassicGames/#/Snake\" linkImage = \"http://simonececcarelli.altervista.org/ClassicGamesImages/snake.PNG\" description = \"This is an implementation of the Snake game\"/>\r\n                            <GameColumn name = \"Tic-Tac-Toe\" link = \"/ClassicGames/#/TicTacToe\" linkImage = \"http://simonececcarelli.altervista.org/ClassicGamesImages/ticTacToe.PNG\" description = \"This is an implementation of the Tic-Tac-Toe game, in which, you can choose the number of rows/columns \"/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ClassicGames;","import React, { Component } from 'react'\r\n\r\nclass Box extends Component{\r\n    render(){\r\n        return (\r\n            <button className={ this.props.name(this.props.index) } key = { this.props.index } onClick={ this.props.onClick } style={this.props.style(this.props.index)}>\r\n                { this.props.value }\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Box;","import React, { Component } from 'react'\r\nimport Box from './box'\r\n\r\nclass Board extends Component{\r\n\r\n    renderBox(i){\r\n        return <Box index = { i } name = { this.props.name } style = { this.props.style } value = { this.props.getValue(i) } onClick={() => this.props.onClick(i)} style = { this.props.style } />;\r\n    }\r\n\r\n    renderBoard(numberOfBoxes){\r\n        let board = [];\r\n        for(let i = 0; i < numberOfBoxes; i++){\r\n            board.push(\r\n                <div className=\"board-row\">\r\n                    {\r\n                        Array.from(new Array(numberOfBoxes), () => i).map((value, index) => {\r\n                            return this.renderBox(index + (value * numberOfBoxes));\r\n                        })\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n        return board;\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                {this.renderBoard(this.props.boardSize)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Board;","import React, { Component } from 'react';\r\nimport Board from '../commonComponents/board'\r\nimport './ConnectFour.css'\r\nconst gameLogic = require('../gameLogics/connectNLogic');\r\n\r\n\r\nclass GameConnectFour extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                boxes: Array.from(new Array(7*7), (value, index) => null),\r\n                colors: Array.from(new Array(7*7), (value, index) => null),\r\n            }],\r\n            stepNumber: 0,\r\n            boardSize: 7,\r\n            isXNext: true,\r\n        };\r\n    }\r\n\r\n    _findFreePosition(column, boxes){\r\n        let counter = column;\r\n        let before = boxes[counter];\r\n        counter += this.state.boardSize;\r\n        for(let i = 1; i < this.state.boardSize; i++){\r\n            if(before == null && boxes[counter] != null){\r\n                return counter - 7;\r\n            }\r\n            if(boxes[counter] == null && i === this.state.boardSize-1){\r\n                return counter;\r\n            }\r\n            counter += 7;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    handleClick(i){\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const boxes = current.boxes.slice();\r\n        const colors = current.colors.slice();\r\n        const column = i % this.state.boardSize;\r\n        const freePosition = this._findFreePosition(column, boxes);\r\n        if(gameLogic.calculateWinner(boxes, 7, 4)){\r\n            return;\r\n        }\r\n        if(freePosition != null){\r\n            boxes[freePosition] = this.state.isXNext ? '#d70000' : '#CCCC00';\r\n            colors[freePosition] = this.state.isXNext ? '#d70000' : '#CCCC00';\r\n            this.setState({\r\n                history: history.concat([{\r\n                    boxes: boxes,\r\n                    colors: colors,\r\n                }]),\r\n                stepNumber: history.length,\r\n                isXNext: !this.state.isXNext,\r\n            });\r\n        }\r\n    }\r\n\r\n    reset(){\r\n        this.setState({\r\n            history: [{\r\n                boxes: Array.from(new Array(7*7), (value, index) => null),\r\n                colors: Array.from(new Array(7*7), (value, index) => null),\r\n            }],\r\n            stepNumber: 0,\r\n            isXNext: true,\r\n        });\r\n    }\r\n\r\n    handleHistory(i){\r\n        const newStep = this.state.stepNumber + i;\r\n        if( newStep <= this.state.history.length - 1 && newStep >= 0) {\r\n            let state = {\r\n                stepNumber: this.state.stepNumber + i,\r\n                isXNext: !this.state.isXNext,\r\n            };\r\n            this.setState(state);\r\n        }\r\n    }\r\n\r\n    handleStyle(id){\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = gameLogic.calculateWinner(current.boxes, 7, 4);\r\n        let style = {background: current.colors[id]};\r\n        if(winner && winner[1].includes(id))\r\n            style.border = \"0.1em solid green\";\r\n        return style;\r\n\r\n    }\r\n\r\n    render(){\r\n\r\n        let boxWinners = [-1,-1];\r\n\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = gameLogic.calculateWinner(current.boxes, 7, 4);\r\n        let type;\r\n        if(winner){\r\n            type = winner[0] === '#d70000' ? 'Red' : 'Yellow';\r\n            boxWinners = winner[1];\r\n        }\r\n        const status = winner ? 'The winner is ' + type : 'Next Player is ' + (this.state.isXNext ? 'Red' : 'Yellow');\r\n        return (\r\n            <main role=\"main\" className=\"container\">\r\n\r\n\r\n                <div className=\"page-title-connect-four\">\r\n                    <p>Connect Four</p>\r\n                </div>\r\n                <div className=\"body-connect-four\">\r\n                    <div className=\"status\">\r\n                        <div><p>{ status }</p></div>\r\n                    </div>\r\n                    <Board\r\n                        name = { () => \"box-connect-four btn-circle\" }\r\n                        boardSize = { this.state.boardSize }\r\n                        getValue = { () => \"\" }\r\n                        onClick = { (i) => this.handleClick(i) }\r\n                        style = { (i) => this.handleStyle(i)}\r\n                    />\r\n                    <div className=\"btn-toolbar\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                        <div className=\"btn-group-reset\" role=\"group\" aria-label=\"First group\">\r\n                            <button  onClick={ () => this.reset() } className=\"btn btn-danger\">Reset</button>\r\n                        </div>\r\n                        <div className=\"btn-group-nextprevious\" role=\"group\" aria-label=\"Second group\">\r\n                            <button  onClick={ () => this.handleHistory(-1) } className=\"btn btn-primary\">Precedence</button>\r\n                            <button  onClick={ () => this.handleHistory(1) } className=\"btn btn-primary\">Next</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameConnectFour;","import React, { Component } from 'react';\r\nimport GameConnectFour from './gameConnectFour'\r\n\r\nclass ConnectFour extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <GameConnectFour/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ConnectFour;\r\n","import React, { Component } from 'react'\r\nimport Board from '../commonComponents/board'\r\nimport './TicTacToe.css'\r\nimport { Jumbotron, Container, Row, Col } from 'react-bootstrap'\r\nconst gameLogic = require('../gameLogics/connectNLogic');\r\n\r\n\r\n\r\nclass GameTicTacToe extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            history:[{\r\n                boxes: Array(9).fill(null),\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            numberOfBoxes: 3,\r\n        };\r\n    }\r\n\r\n    handleClick(i){\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const boxes = current.boxes.slice();\r\n        if(gameLogic.calculateWinner(boxes, this.state.numberOfBoxes, this.state.numberOfBoxes > 4 ? 4 : 3) || boxes[i]) {\r\n            return;\r\n        }\r\n        boxes[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                boxes: boxes,\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    handleChange(number){\r\n        const possible = [0,1,2,3,4,5,6,7,8,9];\r\n        if(number >= 3 && number <= 6){\r\n            this.setState({\r\n                history:[{\r\n                    boxes: Array(possible[number] * possible[number]).fill(null),\r\n                }],\r\n                stepNumber: 0,\r\n                xIsNext: true,\r\n                numberOfBoxes: possible[number],\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    reset(){\r\n        this.setState({\r\n            history:[{\r\n                boxes: Array(9).fill(null),\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            numberOfBoxes: this.state.numberOfBoxes,\r\n        });\r\n    }\r\n\r\n    handleHistory(i){\r\n        const newStep = this.state.stepNumber + i;\r\n        if( newStep <= this.state.history.length - 1 && newStep >= 0) {\r\n            let state = {\r\n                stepNumber: this.state.stepNumber + i,\r\n                xIsNext: !this.state.xIsNext,\r\n            };\r\n            this.setState(state);\r\n        }\r\n    }\r\n\r\n    handleStyle(id){\r\n        let style = {};\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = gameLogic.calculateWinner(current.boxes, this.state.numberOfBoxes, this.state.numberOfBoxes > 4 ? 4 : 3);\r\n        const color = \"black\";\r\n        if(id % this.state.numberOfBoxes === this.state.numberOfBoxes - 1){//last column of the board\r\n            style.borderRight = \"solid \" + color;\r\n        }\r\n        if(id <= this.state.numberOfBoxes - 1) { //first row\r\n            style.borderTop = \"solid \" + color;\r\n        }\r\n        if(id % this.state.numberOfBoxes === 0){//first column\r\n            style.borderLeft = \"solid \" + color;\r\n        }\r\n        if(id >= this.state.numberOfBoxes * this.state.numberOfBoxes - this.state.numberOfBoxes){//last row\r\n            style.borderBottom = \"solid \" + color;\r\n        }\r\n        if(winner && winner[1].includes(id)){\r\n            style.color = \"green\";\r\n        }\r\n        return style;\r\n    }\r\n\r\n    render(){\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n\r\n        let boxWinners = [-1,-1];\r\n        let winner = gameLogic.calculateWinner(current.boxes, this.state.numberOfBoxes, this.state.numberOfBoxes > 4 ? 4 : 3);\r\n        if(winner) {\r\n            boxWinners = winner[1];\r\n            winner = winner[0];\r\n        }\r\n        const status = winner ? 'The winner is ' + winner : 'Next Player is ' + (this.state.xIsNext ? 'X' : 'O');\r\n\r\n        return (\r\n            <main role=\"main\" className=\"container\">\r\n                    <div className=\"blackboard\">\r\n                    <div className=\"pagetitle-tic-tac\">\r\n                        <h1>\r\n                            Tic-Tac-Toe Game\r\n                        </h1>\r\n                    </div>\r\n                        <div className=\"body-tic-tac\">\r\n                            <div className=\"square-number\">\r\n                                <h5>Number of squares (from 3 to 6)</h5>\r\n                                <input type=\"text\" autoComplete=\"off\" name=\"name\" onChange={ (e) => {this.handleChange(e.target.value)}} />\r\n                            </div>\r\n\r\n                            <div className=\"status\">\r\n                                <div><h5>{ status }</h5></div>\r\n                            </div>\r\n                            <div className=\"game-board-tic-tac\">\r\n                                    <Board\r\n                                        name = { () => \"box-tic-tac\" }\r\n                                        getValue = { (id) => current.boxes[id] }\r\n                                        onClick = { (i) => this.handleClick(i) }\r\n                                        boardSize = { this.state.numberOfBoxes }\r\n                                        style = { (i) => this.handleStyle(i) }\r\n                                    />\r\n                            </div>\r\n                            <div className=\"btn-toolbar tic-tac-buttons\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\r\n                                <div className=\"btn-group-reset-tic-tac\" role=\"group\" aria-label=\"First group\">\r\n                                    <button  onClick={ () => this.reset() } className=\"btn personal-outline-danger mr-1\" >Reset</button>\r\n                                </div>\r\n                                <div className=\"btn-group-nextprevious-tic-tac\" role=\"group\" aria-label=\"Second group\">\r\n                                    <button  onClick={ () => this.handleHistory(-1) } className=\"btn personal-outline-primary\">Precedence</button>\r\n                                    <button  onClick={ () => this.handleHistory(1) } className=\"btn personal-outline-primary\">Next</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameTicTacToe;","import React, { Component } from 'react';\r\nimport GameTicTacToe from './gameTicTacToe'\r\n\r\nclass TicTacToe extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <GameTicTacToe/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TicTacToe;\r\n","class SnakeLogic{\r\n    constructor(boardDimensions){\r\n        this.boardDimensions = boardDimensions;\r\n    }\r\n    newApplePosition(){\r\n        return {row: Math.floor(Math.random() * this.boardDimensions), column: Math.floor(Math.random() * this.boardDimensions)};\r\n    }\r\n\r\n    controller(event, direction){\r\n        const newDirection = direction;\r\n        if (event.keyCode === 38) { //up arrow\r\n            if (direction.y !== 1) { //if you are going down you can't going up\r\n                newDirection.x = 0;\r\n                newDirection.y = -1;\r\n            }\r\n        } else if (event.keyCode === 40) {//down arrow\r\n            if (direction.y !== -1) {//if you are going up you can't going down\r\n                newDirection.x = 0;\r\n                newDirection.y = 1;\r\n            }\r\n        } else if (event.keyCode === 39)  {//right arrow\r\n            if (direction.x !== -1) {//if you are going to left you can't turn right\r\n                newDirection.x = 1;\r\n                newDirection.y = 0;\r\n            }\r\n        } else if (event.keyCode === 37)  { //left arrow\r\n            if (direction.x !== 1) {//if you are going to right you can't turn left\r\n                newDirection.x = -1;\r\n                newDirection.y = 0;\r\n            }\r\n        }\r\n        return newDirection;\r\n    }\r\n\r\n    snake\r\n}\r\n\r\nexport default SnakeLogic;","import React, { Component } from 'react';\r\nimport SnakeLogic from '../gameLogics/SnakeLogic';\r\nimport Board from '../commonComponents/board';\r\nimport Utilities from '../gameLogics/Utilities';\r\nimport './Snake.css';\r\n\r\nclass Snake extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        const boardSize = 10;\r\n        this.snakeLogic = new SnakeLogic(boardSize);\r\n        this.scoreForEachApple = 20;\r\n        const boxes = Utilities.createEmptyMatrix(boardSize);\r\n        this.state = {\r\n            boxes: boxes,\r\n            snakePosition: {row: 0, column: 0},\r\n            snakeDirection: {x: 1, y: 0},\r\n            snakeTail: [],\r\n            applePosition: this.snakeLogic.newApplePosition(),//{row: random, column: random}\r\n            boardSize: boardSize,\r\n            score: 0,\r\n            amIDied: false,\r\n            isGamePaused: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        //add the event for changing the direction of the snake\r\n        document.addEventListener('keydown', (direction) => {\r\n            this.handleDirection(direction);\r\n        });\r\n\r\n        setTimeout(() => {this.gameLoop()}, this.state.snakeTail.length ? (200 / this.state.snakeTail.length) + 100 : 400);\r\n    };\r\n\r\n    handleDirection(direction){\r\n        const newDirection = this.snakeLogic.controller(direction, this.state.snakeDirection);\r\n        if(newDirection) this.setState({ snakeDirection: {x: newDirection.x, y: newDirection.y} });\r\n    }\r\n\r\n    didIHitABorder(position){\r\n        if(position.row >= this.state.boardSize || position.row < 0)\r\n            return true;\r\n        if(position.column >= this.state.boardSize || position.column < 0)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    gameLoop() {\r\n        if(!this.state.amIDied && !this.state.isGamePaused) {//understund if I am in the same position of the apple\r\n            const state = {\r\n                score: this.state.score,\r\n                applePosition: this.state.applePosition,\r\n                snakeTail: this.state.snakeTail\r\n            };\r\n            if (this.state.applePosition.row === this.state.snakePosition.row && this.state.applePosition.column === this.state.snakePosition.column) {\r\n                state.score += this.scoreForEachApple;\r\n                state.applePosition = this.snakeLogic.newApplePosition();\r\n                state.snakeTail.push({row: -1, column: -1});\r\n            }\r\n            //set the new position\r\n            const newRow = this.state.snakePosition.row + this.state.snakeDirection.y;\r\n            const newColumn = this.state.snakePosition.column + this.state.snakeDirection.x;\r\n            state.snakePosition = {row: newRow, column: newColumn};\r\n\r\n            //if I'm urting one of the edges then I die\r\n            state.amIDied = this.didIHitABorder(state.snakePosition);\r\n\r\n            //upgrade the position of the tail\r\n            const hold = {row: this.state.snakePosition.row, column: this.state.snakePosition.column};\r\n            state.snakeTail.forEach((currentTailPiece, index) => {\r\n                const current = {row: currentTailPiece.row, column: currentTailPiece.column};\r\n                state.snakeTail[index] = {row: hold.row, column: hold.column};\r\n                hold.row = current.row;\r\n                hold.column = current.column;\r\n\r\n                //if I'm eating myself than I die\r\n                if (state.snakeTail[index].row === state.snakePosition.row && state.snakeTail[index].column === state.snakePosition.column)\r\n                    state.amIDied = true;\r\n            });\r\n\r\n            this.setState(state);\r\n            setTimeout(() => {\r\n                this.gameLoop()\r\n            }, this.state.snakeTail.length ? (200 / this.state.snakeTail.length) + 100 : 400);\r\n        }\r\n    }\r\n\r\n\r\n    getBoxValue(id){\r\n        const coordinates = Utilities.matrixToArrayConverter(id, this.state.boardSize);\r\n        return this.state.boxes[coordinates.row][coordinates.column];\r\n    }\r\n\r\n    getName(id){\r\n        const coordinates = Utilities.matrixToArrayConverter(id, this.state.boardSize);\r\n        let name = \"\";\r\n        name += ((coordinates.row + coordinates.column) % 2 === 0) ? \" ground-light \" : \" ground-dark \";\r\n        if(coordinates.row === this.state.applePosition.row && coordinates.column === this.state.applePosition.column)\r\n            name = \"apple\";\r\n        this.state.snakeTail.forEach((tailPiece, index, tail) => {\r\n            if(tailPiece.row === coordinates.row && tailPiece.column === coordinates.column) {\r\n                if (index === this.state.snakeTail.length - 1) {\r\n                    name += \" end-of-tail-\";\r\n                    let inFrontOf;\r\n                    if(index > 0)\r\n                        inFrontOf = tail[index-1];\r\n                    else inFrontOf = this.state.snakePosition;\r\n                    name += (inFrontOf.column > tailPiece.column) ? \"right\" : (inFrontOf.column < tailPiece.column) ? \"left\" : (inFrontOf.row > tailPiece.row) ? \"bottom\" : \"top\";\r\n                }\r\n                else name = \"tail\";\r\n            }\r\n        });\r\n        if(coordinates.row === this.state.snakePosition.row && coordinates.column === this.state.snakePosition.column) {\r\n            name = \"head-\";\r\n            name += (this.state.snakeDirection.x > 0) ? \"right\" : (this.state.snakeDirection.x < 0) ? \"left\" : (this.state.snakeDirection.y < 0) ? \"top\" : \"bottom\";\r\n        }\r\n\r\n        return name;\r\n    }\r\n\r\n    reset() {\r\n        if(this.state.amIDied) {\r\n            const boardSize = 10;\r\n            this.snakeLogic = new SnakeLogic(boardSize);\r\n            this.scoreForEachApple = 20;\r\n            const boxes = Utilities.createEmptyMatrix(boardSize);\r\n            this.setState({\r\n                boxes: boxes,\r\n                snakePosition: {row: 0, column: 0},\r\n                snakeDirection: {x: 1, y: 0},\r\n                snakeTail: [],\r\n                applePosition: this.snakeLogic.newApplePosition(),//{row: random, column: random}\r\n                boardSize: boardSize,\r\n                score: 0,\r\n                amIDied: false,\r\n                isGamePaused: false,\r\n            });\r\n            setTimeout(() => {\r\n                this.gameLoop()\r\n            }, this.state.snakeTail.length ? (200 / this.state.snakeTail.length) + 100 : 400);\r\n        }\r\n    }\r\n\r\n    pause(){\r\n        if(this.state.isGamePaused){\r\n            this.setState({isGamePaused: false});\r\n            setTimeout(() => {\r\n                this.gameLoop()\r\n            }, this.state.snakeTail.length ? (200 / this.state.snakeTail.length) + 100 : 400);\r\n        }\r\n        else this.setState({isGamePaused: true});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <main role=\"main\" className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className= \"body-snake col\">\r\n                        <div className=\"body-board\">\r\n                            <Board\r\n                                name = { (i) => \"box-snake \" + this.getName(i) }\r\n                                boardSize = { this.state.boardSize }\r\n                                getValue = { (i) => this.getBoxValue(i) }\r\n                                onClick = { (i) => null }\r\n                                style = { (i) => null}\r\n                            />\r\n                        </div>\r\n                        <div className=\"page-title-snake\">\r\n                            <div className=\"title-text\"> <p>Snake</p></div>\r\n                            <div className=\"game-over-snake\"><p>{(this.state.amIDied) ? \"Gama Over\" : \"\"}</p></div>\r\n                            <div className= \"snake-score row mr-auto\">\r\n                                <p>Score: {this.state.score}</p>\r\n                                <div className=\"col-1\">\r\n                                    <div className=\"btn-group\" role=\"group\" aria-label=\"Second group\">\r\n                                        <button  onClick={ () => this.reset() } className=\"btn btn-danger mr-2\">Reset</button>\r\n                                        <button  onClick={ () => this.pause() } className=\"btn btn-warning\">pause</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Snake;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './style/App.css';\nimport PersonalNavbar from './games/home/personalNavbar'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport ClassicGames from './games/home/ClassicGames'\nimport ConnectFour from './games/connectFour/ConnectFour'\nimport TicTacToe from './games/tictactoe/TicTacToe'\nimport Snake from './games/snake/snake'\n\n\nclass App extends Component {\n  render() {\n    return (\n        <div>\n        <Router>\n            <div>\n                <PersonalNavbar/>\n                <Switch>\n                    <Route exact path='/' component={ClassicGames}/>\n                    <Route path=\"/ConnectFour\" component={ConnectFour}/>\n                    <Route path = \"/Snake\" component={Snake}/>\n                    <Route path=\"/TicTacToe\" component={TicTacToe}/>\n                </Switch>\n            </div>\n        </Router>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './style/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}